@startuml

set separator none
package controllers {
    package auth.controller {
        class AuthController <<Function Group>> {
            + {static} signUpWithEmail(req: Request, res: Response): RequestHandler
            + {static} signInWithEmail(req: Request, res: Response): RequestHandler
            + {static} signInWithGoogle(req: Request, res: Response): RequestHandler
            + {static} handleOAuthCallback(req: Request, res: Response): RequestHandler
            + {static} updateUserCredentials(req: Request, res: Response): RequestHandler
            + {static} signOut(req: Request, res: Response): RequestHandler
        }
    }

    package user.controller {
        class UserController <<Function Group>> {
            + {static} getProfile(req: Request, res: Response): RequestHandler
            + {static} getAllUsers(req: Request, res: Response): RequestHandler
            + {static} getUserByID(req: Request, res: Response): RequestHandler
            + {static} getPlaylists(req: Request, res: Response): RequestHandler
            + {static} getListenHistory(req: Request, res: Response): RequestHandler
            + {static} getFollowedArtists(req: Request, res: Response): RequestHandler
            + {static} updateProfile(req: Request, res: Response): RequestHandler
            + {static} upsertListenHistory(req: Request, res: Response): RequestHandler
            + {static} followArtist(req: Request, res: Response): RequestHandler
            + {static} unfollowArtist(req: Request, res: Response): RequestHandler
        }
    }

    package artist.controller {
        class ArtistController <<Function Group>> {
            + {static} addArtist(req: Request, res: Response): RequestHandler
            + {static} getAllArtists(req: Request, res: Response): RequestHandler
            + {static} getArtistByID(req: Request, res: Response): RequestHandler
            + {static} getArtistSongsByID(req: Request, res: Response): RequestHandler
            + {static} getArtistAlbumsByID(req: Request, res: Response): RequestHandler
            + {static} updateArtist(req: Request, res: Response): RequestHandler
            + {static} deleteArtist(req: Request, res: Response): RequestHandler
        }
    }

    package song.controller {
        class SongController <<Function Group>> {
            + {static} addSong(req: Request, res: Response): RequestHandler
            + {static} getAllSongs(req: Request, res: Response): RequestHandler
            + {static} getSongByID(req: Request, res: Response): RequestHandler
            + {static} generatePresignedDownloadURL(req: Request, res: Response): RequestHandler
            + {static} generatePresignedUploadURL(req: Request, res: Response): RequestHandler
            + {static} updateSong(req: Request, res: Response): RequestHandler
            + {static} deleteSong(req: Request, res: Response): RequestHandler
        }
    }

    package collection.controller {
        class CollectionController <<Function Group>> {
            + {static} addCollection(req: Request, res: Response): RequestHandler
            + {static} addCollectionSong(req: Request, res: Response): RequestHandler
            + {static} getAllCollections(req: Request, res: Response): RequestHandler
            + {static} getAllPlaylists(req: Request, res: Response): RequestHandler
            + {static} getAllAlbums(req: Request, res: Response): RequestHandler
            + {static} getCollectionByID(req: Request, res: Response): RequestHandler
            + {static} updateCollection(req: Request, res: Response): RequestHandler
            + {static} deleteCollection(req: Request, res: Response): RequestHandler
            + {static} deleteCollectionSong(req: Request, res: Response): RequestHandler
        }
    }

    package search.controller {
        class SearchController <<Function Group>> {
            + {static} searchDefault(req: Request, res: Response): RequestHandler
            + {static} searchSongs(req: Request, res: Response): RequestHandler
            + {static} searchArtists(req: Request, res: Response): RequestHandler
            + {static} searchUsers(req: Request, res: Response): RequestHandler
            + {static} searchPlaylists(req: Request, res: Response): RequestHandler
            + {static} searchAlbums(req: Request, res: Response): RequestHandler
        }
    }

    package payment.controller {
        class PaymentController <<Function Group>> {
            + {static} createZaloOrder(req: Request, res: Response): RequestHandler
            + {static} receiveZaloCallback(req: Request, res: Response): RequestHandler
            + {static} getZaloOrderStatus(req: Request, res: Response): RequestHandler
        }
    }
}

package services {
    class Redis <<Singleton>> {
        - client: UpstashRedis

        + set<T>(key: string, data: T, options?: SetCommandOptions): Promise<"OK" | T | null>
        + get<T>(key: string): Promise<T | null>
        + del(keys: string[]): Promise<void>
    }
    class Cloudinary <<Singleton>> {
        + upload(file: Express.Multer.File,folder: string,id: string): Promise<string>
        + delete(folder: string, fileName: string): Promise<void>
    }
    class ZaloPay <<Singleton>> {
        - client: ZaloClient {readOnly}
        - orderID: number

        + createOrder(user_id: string, items: OrderItem[]): Promise<any>
        + receiveOrderCallback = (dataStr: string,reqMac: string): ZaloResult
    }
    class BackBlaze <<Singleton>> {
        - client: S3Client {readOnly}

        + generatePresignedDownloadURL(fileName: string,expiresIn: number): Promise<string>
        + generatePresignedUploadURL(fileName: string,expiresIn: number): Promise<string>
        + deleteObject(fileName: string): Promise<void>
    }
}

package types {
    interface ZaloClient {
      app_id: string;
      key1: string;
      key2: string;
      embed_data?: {
        redirectUrl?: string;
      };
    }
    interface ZaloResult {
      return_code: number;
      return_message: string;
    }
    interface OrderItem {
      itemname: string;
      itemprice: number;
      itemquantity: number;
    }
}

ArtistController ..> Redis
ArtistController ..> Cloudinary

AuthController ..> Cloudinary

CollectionController ..> Cloudinary
CollectionController ..> Redis

ZaloPay *-- ZaloClient
ZaloPay ..> ZaloResult
ZaloPay ..> OrderItem: 1..*

PaymentController ..> ZaloPay

SongController ..> Redis
SongController ..> Cloudinary
SongController ..> BackBlaze

SearchController ..> Redis

UserController ..> Redis
UserController ..> Cloudinary

@enduml